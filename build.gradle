buildscript {  
    repositories {
        mavenCentral() 
        jcenter()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
        mavenLocal()
    } 
    dependencies {
        classpath group: 'de.interactive_instruments', name: 'gradle-plugin-osgi-ipojo', version: '1.12.1.32'
        classpath "gradle.plugin.nl.javadude.gradle.plugins:license-gradle-plugin:0.14.0"
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.8.0'
    } 
}

apply plugin: 'maven-publish'
//apply plugin: 'com.jfrog.bintray'
apply plugin: 'java'

version = '2.0.37'
//version += '-SNAPSHOT'

group = 'de.interactive_instruments'

repositories {
    maven {
        url "https://repo.osgeo.org/repository/release"
    }
    maven {
        url "http://maven.geomajas.org"
    }
    jcenter()
    mavenCentral()
    maven {
        url "https://dl.bintray.com/iide/maven"
    }
    mavenLocal()
}

configurations {
    bundles {
        transitive = false
    }
    testBundles {
        transitive = false
    }
    features
}

dependencies {
    // TODO
    bundles subprojects

    features group: 'de.interactive_instruments', name: 'xtraplatform-bundles-runtime', version: '1.1.5'
    features group: 'de.interactive_instruments', name: 'xtraplatform-bundles-core', version: '1.2.3'

    testBundles 'org.ow2.chameleon.testing:osgi-helpers:0.6.2'
    testBundles 'com.google.code.findbugs:jsr305:3.0.2'

    testCompile group: 'de.interactive_instruments', name: 'xtraplatform-bundles-core', version: '1.2.3'
    testCompile subprojects

    testCompile group: 'org.testng', name: 'testng', version: '6.8.5'
    testCompile group: 'junit', name: 'junit', version: '4.12'
    testCompile group: 'org.mockito', name: 'mockito-core', version: '1.9.5'
    testCompile 'org.ow2.chameleon.testing:osgi-helpers:0.6.2'

    testCompile 'org.ops4j.pax.exam:pax-exam-container-native:4.11.0'
    testCompile 'org.ops4j.pax.exam:pax-exam-junit4:4.11.0'
    testCompile 'org.ops4j.pax.exam:pax-exam-link-mvn:4.11.0'
    testCompile 'org.ops4j.pax.exam:pax-exam-link-assembly:4.11.0'
    testCompile 'javax.inject:javax.inject:1'
    testCompile group: 'org.osgi', name: 'org.osgi.compendium', version: '5.0.0'
    testCompile group: 'org.apache.felix', name: 'org.apache.felix.framework', version: '5.6.8'
}

test {
    //useTestNG()
    options {
        //includeGroups 'default'
        /* if you want to run tests for debugging purposes that are not part
        of the continuous integration, put them in the "debug"-group and
        uncomment the following line just in your local working copy
         */
        //includeGroups 'debug'
        //includeGroups 'performance'
        //includeGroups 'integration'
    }
    testLogging.showStandardStreams = true
    reports.html.enabled = true

}

task generateDependsFile {
    // This is useful for the org.ops4j.pax.exam.CoreOptions.maven() stuff
    File outputFileDir = project.file( 'build/classes/test/META-INF/maven/' )
    File outputFile = new File( outputFileDir, 'dependencies.properties' )
    outputs.file outputFile

    doFirst {
        outputFileDir.mkdirs()
        Properties properties = new Properties();
        String files = ""

        // then for all our deps
        project.configurations.bundles.resolvedConfiguration.resolvedArtifacts.each {
            files += "${it.file.toURI().toString()},"
        }
        project.configurations.testBundles.resolvedConfiguration.resolvedArtifacts.each {
            files += "${it.file.toURI().toString()},"
        }
        project.configurations.features.resolvedConfiguration.resolvedArtifacts.each {
            files += "${it.file.toURI().toString()},"
        }

        properties.setProperty("bundles", files )

        FileOutputStream outputStream = new FileOutputStream( outputFile );
        try {
            properties.store( outputStream, "Generated from Gradle for PaxExam testing" )
        }
        finally {
            outputStream.close()
        }
    }
}

task copyTestResources(type: Copy) {
    from "${projectDir}/src/test/resources"
    into "${buildDir}/classes/test"
}

processTestResources.dependsOn copyTestResources
tasks.test.dependsOn tasks.generateDependsFile


subprojects {
    apply plugin: 'java'
    apply plugin: 'groovy'
    apply plugin: 'osgi-ipojo'
    apply plugin: 'maven-publish'
    apply plugin: 'com.jfrog.bintray'
    apply plugin: 'license'

    group = 'de.interactive_instruments'

    sourceCompatibility = 1.8

    license {
        header rootProject.file('gradle/license-header')
        strictCheck true
        skipExistingHeaders false
        excludes([
                "**/*.mustache",
                "**/*.png",
                "**/*.ico",
                "**/*.xcf",
                "**/*.txt",
                "**/*.json"])
        ext.year = Calendar.getInstance().get(Calendar.YEAR)
        ext.name = "interactive instruments GmbH"

        //ext.name = "European Union, interactive instruments GmbH"
        //includes([
        excludes([
            "**/FrameworkMessages.java",
            "**/CSWAdapter.java",
            "**/CSWOperation.java",
            "**/CSWOperationGetCapabilities.java",
            "**/CSWOperationGetRecords.java",
            "**/CSWOperationQuery.java",
            "**/CSWQuery.java",
            "**/CSWRequest.java",
            "**/AbstractCSWRecordsAnalyzer.java",
            "**/CSWCapabilitiesAnalyzer.java",
            "**/CSWCapabilitiesParser.java",
            "**/CSWRecordsAnalyzer.java",
            "**/CSWRecordsParser.java",
            "**/ExtractWFSUrlsFromCSW.java",
            "**/ExtractWfsUrlsCSWRecordsAnalyzer.java",
            "**/LoggingCSWRecordsAnalyzer.java",
            "**/MultiCSWRecordsAnalyzer.java",
            "**/CSWAdapterTest.java",
            "**/CSW.java",
            "**/OWS.java",
            "**/VersionedVocabulary.java",
            "**/WFS.java",
            "**/GMLAnalyzer.java",
            "**/GMLParser.java",
            "**/GMLSchemaAnalyzer.java",
            "**/GMLSchemaParser.java",
            "**/WFSAdapter.java",
            "**/AbstractWfsCapabilitiesAnalyzer.java",
            "**/LoggingWfsCapabilitiesAnalyzer.java",
            "**/MultiWfsCapabilitiesAnalyzer.java",
            "**/WFSCapabilitiesAnalyzer.java",
            "**/WFSCapabilitiesParser.java",
            "**/DescribeFeatureType.java",
            "**/GetCapabilities.java",
            "**/WFSAdapter.java",
            "**/WFSOperation.java",
            "**/WFSOperationDescribeFeatureType.java",
            "**/WFSOperationGetCapabilities.java",
            "**/WFSOperationGetFeature.java",
            "**/WFSOperationGetPropertyValue.java",
            "**/WFSQuery.java",
            "**/WFSRequest.java",
            "**/AbstractWfsCapabilitiesAnalyzer.java",
            "**/LoggingWfsCapabilitiesAnalyzer.java",
            "**/MultiWfsCapabilitiesAnalyzer.java",
            "**/WFSCapabilitiesAnalyzer.java",
            "**/WFSCapabilitiesParser.java",
            "**/XMLNamespaceNormalizer.java",
            "**/XMLPathTracker.java",
            "**/AbstractWfsProxyFeatureTypeAnalyzer.java",
            "**/AbstractWfsProxyService.java",
            "**/WFSProxyServiceProperties.java",
            "**/WfsProxyCapabilities.java",
            "**/WfsProxyCapabilitiesAnalyzer.java",
            "**/WfsProxyMappingStatus.java",
            "**/WfsProxyOnTheFlyMapping.java"
        ])
    }

    repositories {     
        mavenLocal()
        maven {
            url "https://repo.osgeo.org/repository/release"
        }
        maven {
            url "http://maven.geomajas.org"
        }
        mavenCentral()
        jcenter()
        maven {
            url 'http://oss.sonatype.org/content/repositories/snapshots'
        }
        maven {
            url "https://dl.bintray.com/iide/maven"
        }
    }
    
    dependencies {    
        testCompile group: 'org.testng', name: 'testng', version: '6.8.5'
        testCompile group: 'junit', name: 'junit', version: '4.12'
        testCompile "org.spockframework:spock-core:1.2-groovy-2.4"
        testCompile( 'com.athaydes:spock-reports:1.6.1' ) {
            transitive = false // this avoids affecting your version of Groovy/Spock
        }
        testCompile group: 'org.mockito', name: 'mockito-core', version: '1.9.5'
    }
    
    test {
        //useTestNG()
        options {
            //includeGroups 'default'
            /* if you want to run tests for debugging purposes that are not part
            of the continuous integration, put them in the "debug"-group and
            uncomment the following line just in your local working copy
             */
            //includeGroups 'debug'
            //includeGroups 'performance'
            //includeGroups 'integration'
        }
        testLogging.showStandardStreams = true
        reports.html.enabled = true

        systemProperty 'com.athaydes.spockframework.report.outputDir', "$rootProject.buildDir/reports/spock"
        systemProperty 'com.athaydes.spockframework.report.showCodeBlocks', 'true'
        systemProperty 'com.athaydes.spockframework.report.projectName', rootProject.name
        systemProperty 'com.athaydes.spockframework.report.projectVersion', rootProject.version

    }
    
    // aggregated javadoc
    /*afterEvaluate { project ->
        rootProject.javadoc {
            classpath += project.sourceSets.main.compileClasspath
            source += project.sourceSets.main.allJava
        }
    }*/   


    jar {
        manifest {
            attributes("Implementation-Title": project.name, "Implementation-Version": project.version)
        }
    }

    configurations {
        embedded
        provided
        compile.extendsFrom embedded
        compile.extendsFrom provided
    }

    dependencies {
        compileOnly         "org.immutables:value:2.6.1:annotations"
        annotationProcessor "org.immutables:value:2.6.1"


        // TODO: get from root project, at least the versions
        provided group: 'de.interactive_instruments', name: 'xtraplatform-bundles-runtime', version: '1.1.5'
        // TODO: shouldn't we only be allowed to use api bundles here?
        provided group: 'de.interactive_instruments', name: 'xtraplatform-bundles-core', version: '1.2.3'

        // TODO: this is in bundles-runtime, but with transitive=false
        // TODO: we need the transitive dependencies in provided
        provided group: 'de.interactive_instruments', name: 'xtraplatform-dropwizard', version: '1.1.5'
    }

    compileJava {
        String relativePath = "build/generated/src/main/java"
        sourceSets.main.java { srcDir relativePath }
        File generatedSourceDir = project.file("build/generated/src/main/java")
        project.mkdir(generatedSourceDir)
        options.annotationProcessorGeneratedSourcesDirectory = generatedSourceDir
        outputs.dir(generatedSourceDir)

        doFirst {
            // force a clean of generatedSourceDir to prevent java.lang.IllegalStateException: endPosTable already set. This shouldn't be need if using Gradle 4.8+ or Java 9+.
            project.delete(generatedSourceDir)
            project.mkdir(generatedSourceDir)
        }
    }
    
    jar {
        manifest { 
            instruction '-removeheaders', 'Bnd-LastModified'
            instructionReplace "Bundle-SymbolicName",project.name
        }
    }

    task sourceJar(type: Jar) {
        from sourceSets.main.allSource
    }

    publishing {
        publications {
            maven(MavenPublication) {
                from components.java

                artifact sourceJar {
                    classifier "sources"
                }

                pom.withXml{
                    asNode().remove(asNode().get('dependencies'))
                    def dependenciesNode = asNode().appendNode('dependencies')

                    configurations.provided.allDependencies.each {
                        def dependencyNode = dependenciesNode.appendNode('dependency')
                        dependencyNode.appendNode('groupId', it.group)
                        dependencyNode.appendNode('artifactId', it.name)
                        dependencyNode.appendNode('version', it.version)
                        dependencyNode.appendNode('scope', 'runtime')

                        def exclusionsNode = dependencyNode.appendNode('exclusions')
                        def exclusionNode = exclusionsNode.appendNode('exclusion')
                        exclusionNode.appendNode('groupId', '*')
                        exclusionNode.appendNode('artifactId', '*')
                    }
                }
            }
        }
    }
    afterEvaluate { project ->
        bintray {
            user = project.bintrayUser
            key = project.bintrayApiKey
            publications = ['maven']
            publish = true
            pkg {
                repo = 'maven'
                name = project.name
                userOrg = 'iide'
                licenses = ['MPL-2.0']
                websiteUrl = 'https://github.com/interactive-instruments/XtraPlatform-SDI-Tools'
                issueTrackerUrl = 'https://github.com/interactive-instruments/XtraPlatform-SDI-Tools/issues'
                vcsUrl = 'https://github.com/interactive-instruments/XtraPlatform-SDI-Tools.git'
                githubRepo = 'interactive-instruments/XtraPlatform-SDI-Tools'
                githubReleaseNotesFile = 'README.md'
                version {
                    name = project.version
                }
            }
        }
    }
}

publishing {
    publications {
        mavenRoot(MavenPublication) {
            pom.withXml{
                def dependenciesNode = asNode().appendNode('dependencies')

                configurations.bundles.allDependencies.each {
                    def dependencyNode = dependenciesNode.appendNode('dependency')
                    dependencyNode.appendNode('groupId', it.group)
                    dependencyNode.appendNode('artifactId', it.name)
                    dependencyNode.appendNode('version', it.version)
                    dependencyNode.appendNode('scope', 'runtime')
                    
                    def exclusionsNode = dependencyNode.appendNode('exclusions')
                    def exclusionNode = exclusionsNode.appendNode('exclusion')
                    exclusionNode.appendNode('groupId', '*')
                    exclusionNode.appendNode('artifactId', '*')
                }
            }
        }
    }
}

// TODO: does not work without commenting out subprojects bintray plugin
/*bintray {
    user = project.bintrayUser
    key = project.bintrayApiKey
    publications = ['mavenRoot']
    publish = true
    pkg {
        repo = 'maven'
        name = project.name
        userOrg = 'iide'
        licenses = ['MPL-2.0']
        websiteUrl = 'https://github.com/interactive-instruments/XtraPlatform-SDI-Tools'
        issueTrackerUrl = 'https://github.com/interactive-instruments/XtraPlatform-SDI-Tools/issues'
        vcsUrl = 'https://github.com/interactive-instruments/XtraPlatform-SDI-Tools.git'
        githubRepo = 'interactive-instruments/XtraPlatform-SDI-Tools'
        githubReleaseNotesFile = 'README.md'
        version {
            name = project.version
        }
    }
}*/
apply from: 'license-report.gradle'
