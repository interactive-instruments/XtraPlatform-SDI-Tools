buildscript {  
    repositories {
        mavenCentral() 
        jcenter()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    } 
    dependencies {
        classpath group: 'de.interactive_instruments', name: 'gradle-plugin-osgi-ipojo', version: '1.12.1.26'
        classpath "gradle.plugin.nl.javadude.gradle.plugins:license-gradle-plugin:0.12.1"
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.6'
    } 
}

apply plugin: 'maven-publish'
apply plugin: 'com.jfrog.bintray'

version = '1.0.4'

//version += '-SNAPSHOT'

group = 'de.interactive_instruments'

repositories {     
    mavenCentral()
}

configurations {
    bundles {
        transitive = false
    }
}

dependencies {
    // TODO
    bundles subprojects
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'osgi-ipojo'
    apply plugin: 'maven-publish'
    apply plugin: 'com.jfrog.bintray'
    apply plugin: 'license'

    version = '1.0.0'

    //version += '-SNAPSHOT'

    group = 'de.interactive_instruments'

    sourceCompatibility = 1.7

    license {
        header rootProject.file('gradle/license-header')
        strictCheck true
        excludes([
                "**/*.mustache",
                "**/*.png",
                "**/*.ico",
                "**/*.xcf",
                "**/*.json"])
    }

    repositories {     
        //mavenLocal()
        mavenCentral()
        jcenter()
        maven {
            url "http://maven.forgerock.org/repo/repo"
        }
        maven {
            url 'http://oss.sonatype.org/content/repositories/snapshots'
        }
        maven {
            url "https://dl.bintray.com/iide/maven"
        }
    }
    
    dependencies {    
        testCompile group: 'org.testng', name: 'testng', version: '6.8.5'
        testCompile group: 'junit', name: 'junit', version: '4.12'
        testCompile group: 'org.mockito', name: 'mockito-core', version: '1.9.5'
    }
    
    test {
        useTestNG()
        options {
            includeGroups 'default'
            /* if you want to run tests for debugging purposes that are not part
            of the continuous integration, put them in the "debug"-group and
            uncomment the following line just in your local working copy
             */
            //includeGroups 'debug'
            //includeGroups 'performance'
            //includeGroups 'integration'
        }
        testLogging.showStandardStreams = true
        reports.html.enabled = true
    
    }
    
    // aggregated javadoc
    /*afterEvaluate { project ->
        rootProject.javadoc {
            classpath += project.sourceSets.main.compileClasspath
            source += project.sourceSets.main.allJava
        }
    }*/   


    jar {
        manifest {
            attributes("Implementation-Title": project.name, "Implementation-Version": project.version)
        }
    }

    configurations {
        embedded
        provided
        compile.extendsFrom embedded
        compile.extendsFrom provided
    }

    dependencies {
        // TODO: get from root project, at least the versions
        provided group: 'de.interactive_instruments', name: 'xtraplatform-bundles-runtime', version: '1.0.3'
        // TODO: shouldn't we only be allowed to use api bundles here?
        provided group: 'de.interactive_instruments', name: 'xtraplatform-bundles-core', version: '1.0.2'

        // TODO: this is in bundles-runtime, but with transitive=false
        // TODO: we need the transitive dependencies in provided
        provided group: 'de.interactive_instruments', name: 'xtraplatform-dropwizard', version: '1.0.2'
    }
    
    jar {
        manifest { 
            instruction '-removeheaders', 'Bnd-LastModified'
            instructionReplace "Bundle-SymbolicName",project.name.replaceAll('-', '.')
        }
    }
    
    /*i18n {
        outDir = new File(sourceSets.main.java.srcDirs.toList().first().parentFile, "i18n")
    }*/
    sourceSets.main.java.srcDirs += new File(sourceSets.main.java.srcDirs.toList().first().parentFile, "i18n")

    task sourceJar(type: Jar) {
        from sourceSets.main.allSource
    }

    publishing {
        publications {
            maven(MavenPublication) {
                from components.java

                artifact sourceJar {
                    classifier "sources"
                }
            }
        }
    }

    bintray {
        user = project.bintrayUser
        key = project.bintrayApiKey
        publications = ['maven']
        publish = false
        pkg {
            repo = 'maven'
            name = project.name
            userOrg = 'iide'
            licenses = ['Apache-2.0']
            websiteUrl = 'https://github.com/interactive-instruments/XtraPlatform-SDI-Tools'
            issueTrackerUrl = 'https://github.com/interactive-instruments/XtraPlatform-SDI-Tools/issues'
            vcsUrl = 'https://github.com/interactive-instruments/XtraPlatform-SDI-Tools.git'
            githubRepo = 'interactive-instruments/XtraPlatform-SDI-Tools'
            githubReleaseNotesFile = 'README.md'
            version {
                name = project.version
            }
        }
    }
}

publishing {
    publications {
        maven(MavenPublication) {
            pom.withXml{
                def dependenciesNode = asNode().appendNode('dependencies')

                configurations.bundles.allDependencies.each {
                    def dependencyNode = dependenciesNode.appendNode('dependency')
                    dependencyNode.appendNode('groupId', it.group)
                    dependencyNode.appendNode('artifactId', it.name)
                    dependencyNode.appendNode('version', it.version)
                    dependencyNode.appendNode('scope', 'runtime')
                    
                    def exclusionsNode = dependencyNode.appendNode('exclusions')
                    def exclusionNode = exclusionsNode.appendNode('exclusion')
                    exclusionNode.appendNode('groupId', '*')
                    exclusionNode.appendNode('artifactId', '*')
                }
            }
        }
    }
}

// TODO: does not work without commenting out subprojects bintray plugin
bintray {
    user = project.bintrayUser
    key = project.bintrayApiKey
    publications = ['maven']
    publish = false
    pkg {
        repo = 'maven'
        name = project.name
        userOrg = 'iide'
        licenses = ['Apache-2.0']
        websiteUrl = 'https://github.com/interactive-instruments/XtraPlatform-SDI-Tools'
        issueTrackerUrl = 'https://github.com/interactive-instruments/XtraPlatform-SDI-Tools/issues'
        vcsUrl = 'https://github.com/interactive-instruments/XtraPlatform-SDI-Tools.git'
        githubRepo = 'interactive-instruments/XtraPlatform-SDI-Tools'
        githubReleaseNotesFile = 'README.md'
        version {
            name = project.version
        }
    }
}
