buildscript {  
    repositories {
        mavenCentral() 
        jcenter()
        maven {
            url "http://repository.excilys.com/content/groups/public"
        }
        maven {
            url "http://nyx/artifactory/plugins-snapshot"
        }
        maven {
            url "http://nyx/artifactory/plugins-release"
        }
    } 
    dependencies { 
        classpath group: 'de.interactive-instruments', name: 'gradle-plugin-forgerock-i18n', version: '1.0.6'
        classpath group: 'de.interactive-instruments', name: 'gradle-plugin-osgi-ipojo', version: '1.12.1.26'        
        classpath group: 'net.serenity-bdd', name: 'serenity-gradle-plugin', version: '1.1.16'
        
    } 
}

apply plugin: 'maven-publish'

version = '0.1.0'

version += '-SNAPSHOT'

group = 'de.interactive-instruments'

repositories {     
    mavenCentral()
}

configurations {
    bundles {
        transitive = false
    }
}

dependencies {
    // TODO
    bundles subprojects
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'forgerock-i18n'
    apply plugin: 'osgi-ipojo'
    apply plugin: 'maven-publish'

    version = '0.1.0'

    version += '-SNAPSHOT'

    group = 'de.interactive-instruments'

    sourceCompatibility = 1.7
    
    repositories {     
        mavenLocal()
        mavenCentral()
        jcenter()
        maven {
            url "http://nyx/artifactory/libs-release"
        }
        maven {
            url "http://maven.forgerock.org/repo/repo"
        }
        maven {
            url 'http://oss.sonatype.org/content/repositories/snapshots'
        }
    }
    
    dependencies {    
        testCompile group: 'org.testng', name: 'testng', version: '6.8.5'
        testCompile group: 'junit', name: 'junit', version: '4.12'
        testCompile group: 'org.mockito', name: 'mockito-core', version: '1.9.5'
        testCompile ('net.serenity-bdd:serenity-core:1.1.16') {
            exclude module: 'guava'
        }
        testCompile ('net.serenity-bdd:serenity-junit:1.1.16') {
            exclude module: 'guava'
        }
    }
    
    test {
        useTestNG()
        options {
            includeGroups 'default'
            /* if you want to run tests for debugging purposes that are not part
            of the continuous integration, put them in the "debug"-group and
            uncomment the following line just in your local working copy
             */
            //includeGroups 'debug'
            //includeGroups 'performance'
            //includeGroups 'integration'
        }
        testLogging.showStandardStreams = true
        reports.html.enabled = true
    
    }
    
    // aggregated javadoc
    /*afterEvaluate { project ->
        rootProject.javadoc {
            classpath += project.sourceSets.main.compileClasspath
            source += project.sourceSets.main.allJava
        }
    }*/   


    jar {
        manifest {
            attributes("Implementation-Title": project.name, "Implementation-Version": project.version)
        }
    }

    configurations {
        embedded
        provided
        compile.extendsFrom embedded
        compile.extendsFrom provided
    }

    dependencies {
        
        // TODO
        provided 'com.google.guava:guava:17.0'

        // TODO: retrieve from bundles-runtime
        provided group: 'org.slf4j', name: 'slf4j-api', version: '1.7.6'
        provided group: 'ch.qos.logback', name: 'logback-classic', version: '1.1.3'
        provided group: 'ch.qos.logback', name: 'logback-core', version: '1.1.3'

        provided group: 'org.osgi', name: 'org.osgi.compendium', version: '4.2.0'
        provided group: 'org.apache.felix', name: 'org.apache.felix.framework', version: '4.4.1'
        provided group: 'org.apache.felix', name: 'org.apache.felix.ipojo', version: '1.12.1'

        provided group: 'de.interactive-instruments', name: 'xtraplatform-api', version: '1.0.0-SNAPSHOT'
        provided group: 'de.interactive-instruments', name: 'xtraplatform-dropwizard', version: '1.0.0-SNAPSHOT'
    }
    
    jar {
        manifest { 
            instruction '-removeheaders', 'Bnd-LastModified'
            instructionReplace "Bundle-SymbolicName",project.name.replaceAll('-', '.')
        }
    }
    
    i18n {
        outDir = new File(sourceSets.main.java.srcDirs.toList().first().parentFile, "i18n")
    }
    sourceSets.main.java.srcDirs += i18n.outDir

    publishing {
        publications {
            maven(MavenPublication) {
                from components.java
            }
        }
    }
}

/*configure(subprojects.findAll {it.name != 'xtraplatform-api' && it.name != 'xtraplatform-dropwizard' && it.name != 'xtraplatform-logging-i18n' && it.name != 'xtraplatform-runtime'}) {
    dependencies {
        compile project(':xtraplatform-api')
    }
}

configure(subprojects.findAll {it.name != 'xtraplatform-logging-i18n' && it.name != 'xtraplatform-dropwizard' && it.name != 'xtraplatform-runtime'}) {
    dependencies {
        compile project(':xtraplatform-dropwizard')
    }
    
    jar {
    manifest { 
     instruction 'Import-Package', 'com.fasterxml.jackson.module.afterburner.ser'   
     instruction 'Import-Package', '*'   
    }
    }
}

configure(subprojects.findAll {it.name != 'xtraplatform-logging-i18n'}) {
    dependencies {
        compile project(':xtraplatform-logging-i18n')
    }
}*/

//conf2ScopeMappings.addMapping(1, configurations.provided, 'compile')

publishing {
    publications {
        maven(MavenPublication) {
            pom.withXml{
                def dependenciesNode = asNode().appendNode('dependencies')

                configurations.bundles.allDependencies.each {
                    def dependencyNode = dependenciesNode.appendNode('dependency')
                    dependencyNode.appendNode('groupId', it.group)
                    dependencyNode.appendNode('artifactId', it.name)
                    dependencyNode.appendNode('version', it.version)
                    dependencyNode.appendNode('scope', 'runtime')
                    
                    def exclusionsNode = dependencyNode.appendNode('exclusions')
                    def exclusionNode = exclusionsNode.appendNode('exclusion')
                    exclusionNode.appendNode('groupId', '*')
                    exclusionNode.appendNode('artifactId', '*')
                }
            }
        }
    }
}


