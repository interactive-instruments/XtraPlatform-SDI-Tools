#cqlFilter ::= booleanValueExpression;
#booleanValueExpression ::= booleanTerm
#                        |  booleanValueExpression "OR" booleanTerm;
#booleanTerm ::= booleanFactor
#             |  booleanTerm "AND" booleanFactor;
#booleanFactor ::= ["NOT"] booleanPrimary;
#booleanPrimary ::= predicate
#                |  leftParen cqlFilter rightParen;
predicate := <comparisonPredicate>
           |  spatialPredicate
           |  temporalPredicate
           |  existencePredicate
           |  inPredicate;
leftParen ::= "(" ;
<comparisonPredicate> := <binaryComparisonPredicate>
                     |  propertyIsLikePredicate
                     |  propertyIsBetweenPredicate
                     |  propertyIsNullPredicate;
spatialPredicate ::= spatialOperator leftParen geomExpression comma
                     geomExpression rightParen;
temporalPredicate ::= temporalExpression temporalOperator temporalExpression
                      [temporalExpression];
existencePredicate ::= propertyName "EXISTS"
                    |  propertyName "DOES" "NOT" "EXIST" ;
<binaryComparisonPredicate> := <scalarExpression> <comparisonOperator>
                              <scalarExpression>;
propertyIsLikePredicate ::= scalarExpression "LIKE" regularExpression;
propertyIsBetweenPredicate ::= scalarExpression "BETWEEN" scalarExpression "AND"
                               scalarExpression;
<scalarExpression> := <propertyName>
                  |  characterLiteral
                  |  <numericLiteral>
                  |  function
                  |  arithmeticExpression;
<comparisonOperator> := eq
                    |  neq
                    |  lt
                    |  <gt>
                    |  lteq
                    |  gteq;
propertyIsNullPredicate ::= scalarExpression "IS" ["NOT"] "NULL" ;
<propertyName> := <identifier>;
characterLiteral ::= characterStringLiteral
                  |  bitStringLiteral
                  |  hexStringLiteral;
<numericLiteral> := <unsignedNumericLiteral>
                |  signedNumericLiteral;
function ::= identifier {argumentList};
regularExpression ::= characterLiteral;
eq ::= "=" ;
neq ::= lt gt;
lt ::= "lt" ;
<gt> := ">" ;
lteq ::= lt eq;
gteq ::= gt eq;
spatialOperator ::= "EQUALS"
                 |  "DISJOINT"
                 |  "TOUCHES"
                 |  "WITHIN"
                 |  "OVERLAPS"
                 |  "CROSSES"
                 |  "INTERSECTS"
                 |  "CONTAINS" ;
geomExpression ::= propertyName
                |  geomLiteral
                |  function;
comma ::= "," ;
geomLiteral ::= pointTaggedText
             |  linestringTaggedText
             |  polygonTaggedText
             |  multipointTaggedText
             |  multilinestringTaggedText
             |  multipolygonTaggedText
             |  geometryCollectionTaggedText
             |  envelopeTaggedText;
temporalExpression ::= propertyName
                    |  temporalLiteral
                    |  function;
temporalOperator ::= "AFTER"
                  |  "BEFORE"
                  |  "BEGINS"
                  |  "BEGUNBY"
                  |  "TCONTAINS"
                  |  "DURING"
                  |  "ENDEDBY"
                  |  "ENDS"
                  |  "TEQUALS"
                  |  "MEETS"
                  |  "METBY"
                  |  "TOVERLAPS"
                  |  "OVERLAPPEDBY"
                  |  "ANYINTERACTS"
                  |  "INTERSECTS" ;
temporalLiteral ::= fullDate
                 |  fullDate "T" utcTime;
inPredicate ::= propertyName "IN" leftParen { characterLiteral
             |  numericLiteral
             |  geomLiteral
             |  temporalLiteral
             |  function } rightParen;
<identifier> := <identifierStart> [ {identifierPart} ];
argumentList ::= leftParen [positionalArgument] rightParen;
positionalArgument ::= argument [ { comma argument } ];
argument ::= characterLiteral
          |  numericLiteral
          |  geomLiteral
          |  propertyName
          |  arithmeticExpression;
arithmeticExpression ::= arithmeticOperand arithmeticOperator arithmeticOperand;
arithmeticOperand ::= propertyName
                   |  numericLiteral
                   |  function;
arithmeticOperator ::= plusSign
                    |  minusSign
                    |  asterisk
                    |  solidus;
plusSign ::= "+" ;
minusSign ::= "-" ;
asterisk ::= "*" ;
<unsignedNumericLiteral> := <exactNumericLiteral>
                        |  approximateNumericLiteral;
<exactNumericLiteral> := <unsignedInteger> [ period [ unsignedInteger ] ]
                     |  period unsignedInteger;
signedNumericLiteral ::= [sign] exactNumericLiteral
                      |  approximateNumericLiteral;
<unsignedInteger> := {digit};
period ::= "." ;
approximateNumericLiteral ::= mantissa "E" exponent;
mantissa ::= exactNumericLiteral;
exponent ::= signedInteger;
signedInteger ::= [ sign ] unsignedInteger;
sign ::= plusSign
      |  minusSign;
characterStringLiteral ::= quote [ {character} ] quote;
bitStringLiteral ::= "B" quote [ {bit} ] quote;
quote ::= "'" ;
hexStringLiteral ::= "X" quote [ {hexit} ] quote;
<identifierStart> := <alpha>;
<alpha> := [A-Za-z] ;
identifierPart ::= alpha
                |  digit;
character ::= alpha
           |  digit
           |  specialCharacter
           |  quoteQuote;
<digit> := [0-9] ;
specialCharacter ::= percent
                  |  ampersand
                  |  leftParen
                  |  rightParen
                  |  asterisk
                  |  plusSign
                  |  comma
                  |  minusSign
                  |  period
                  |  solidus
                  |  colon
                  |  semicolon
                  |  lt
                  |  gt
                  |  eq
                  |  questionMark
                  |  underscore
                  |  verticalBar
                  |  doubleQuote ;
quoteQuote ::= quote quote;
percent ::= "%" ;
ampersand ::= "&" ;
rightParen ::= ")" ;
solidus ::= "/" ;
colon ::= ":" ;
semicolon ::= ";" ;
questionMark ::= "?" ;
underscore ::= "_" ;
verticalBar ::= "|" ;
#doubleQuote ::= "\"";
#octothorp ::= "#" ;
#dollar ::= "$" ;
bit ::= "0"
     |  "1" ;
hexit ::= digit
       |  "A"
       |  "B"
       |  "C"
       |  "D"
       |  "E"
       |  "F"
       |  "a"
       |  "b"
       |  "c"
       |  "d"
       |  "e"
       |  "f" ;
fullDate ::= dateYear "-" dateMonth "-" dateDay;
dateYear ::= digit digit digit digit;
dateMonth ::= digit digit;
dateDay ::= digit digit;
utcTime ::= timeHour ":" timeMinute ":" timeSecond [timeZoneOffset];
timeHour ::= digit digit;
timeMinute ::= digit digit;
timeSecond ::= digit digit [period digit {digit}];
timeZoneOffset ::= "Z"
                |  sign timeHour;
pointTaggedText ::= "POINT" pointText;
linestringTaggedText ::= "LINESTRING" lineStringText;
polygonTaggedText ::= "POLYGON" polygonText;
multipointTaggedText ::= "MULTIPOINT" multiPointText;
multilinestringTaggedText ::= "MULTILINESTRING" multiLineStringText;
multipolygonTaggedText ::= "MULTIPOLYGON" multiPolygonText;
geometryCollectionTaggedText ::= "GEOMETRYCOLLECTION" geometryCollectionText;
pointText ::= leftParen point rightParen;
point ::= xCoord yCoord [zCoord];
xCoord ::= signedNumericLiteral;
yCoord ::= signedNumericLiteral;
zCoord ::= signedNumericLiteral;
lineStringText ::= leftParen point {comma point} rightParen;
polygonText ::= leftParen lineStringText {comma lineStringText} rightParen;
multiPointText ::= leftParen pointText {comma pointText} rightParen;
multiLineStringText ::= leftParen lineStringText {comma lineStringText}
                        rightParen;
multiPolygonText ::= leftParen polygonText {comma polygonText} rightParen;
geometryCollectionText ::= leftParen geomLiteral {comma geomLiteral} rightParen;
envelopeTaggedText ::= "ENVELOPE" envelopeText;
envelopeText ::= leftParen westBoundLon comma eastBoundLon comma northBoundLat
                 comma southBoundLat [comma minElev comma maxElev] rightParen;
westBoundLon ::= signedNumericLiteral;
eastBoundLon ::= signedNumericLiteral;
northBoundLat ::= signedNumericLiteral;
southBoundLat ::= signedNumericLiteral;
minElev ::= signedNumericLiteral;
maxElev ::= signedNumericLiteral;